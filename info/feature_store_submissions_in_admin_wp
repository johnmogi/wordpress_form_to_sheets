
To add a feature for storing and viewing past submissions from the WordPress admin, you'll need to create a system that captures form submissions and stores them in the WordPress database. Then, you'll need to create an interface in the WordPress admin to view these submissions.

Here's a high-level overview of the steps involved:

1. Create a Custom Database Table
You'll need a custom database table to store form submissions. This table should have columns for each form field and possibly additional metadata.

Create Table on Plugin Activation: Use the register_activation_hook to create your table when the plugin is activated. Here's an example of what that might look like:

php
Copy code
function custom_form_plugin_activation() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'form_submissions';

    $charset_collate = $wpdb->get_charset_collate();

    $sql = "CREATE TABLE $table_name (
        id mediumint(9) NOT NULL AUTO_INCREMENT,
        time datetime DEFAULT '0000-00-00 00:00:00' NOT NULL,
        // Add columns for each form field
        name tinytext NOT NULL,
        phone tinytext NOT NULL,
        // ... other fields ...
        PRIMARY KEY  (id)
    ) $charset_collate;";

    require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
    dbDelta($sql);
}
register_activation_hook(__FILE__, 'custom_form_plugin_activation');
2. Store Form Submissions in the Database
Modify your form submission handler to insert the data into the database.

php
Copy code
function handle_custom_form_ajax_submission() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'form_submissions';

    // Assume all your form fields are in $_POST
    $data = [
        'time' => current_time('mysql'),
        'name' => sanitize_text_field($_POST['customer-name']),
        'phone' => sanitize_text_field($_POST['phone-number']),
        // ... other fields ...
    ];

    $wpdb->insert($table_name, $data);

    // ... rest of your existing code ...
}
3. Create an Admin Page to View Submissions
You can extend your existing admin page function to include a section for viewing submissions.

Query the Database: Fetch the submissions from your custom table.

Display the Data: You can display the data in a simple HTML table or use WordPress' WP_List_Table class for more advanced features like pagination and sorting.

php
Copy code
function custom_form_management_page() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'form_submissions';

    // Fetch submissions
    $submissions = $wpdb->get_results("SELECT * FROM $table_name");

    // Your existing admin page content...

    // HTML table for displaying submissions
    echo '<h2>Form Submissions</h2>';
    echo '<table>';
    foreach ($submissions as $submission) {
        echo '<tr>';
        echo '<td>' . esc_html($submission->name) . '</td>';
        echo '<td>' . esc_html($submission->phone) . '</td>';
        // ... other fields ...
        echo '</tr>';
    }
    echo '</table>';
}
4. Security and Optimization
Security: Ensure that all data is properly sanitized and validated both when inserting into and retrieving from the database.
Optimization: Depending on the volume of submissions, consider indexing your database table and implementing caching strategies.
Error Handling: Implement error checking and handling for database operations.
5. Uninstall Cleanup
Optionally, you might want to add a function to clean up the database (i.e., remove the table) when the plugin is uninstalled.

This is a basic overview and starting point. Depending on your specific needs, you might need to add more functionality or fine-tune the database queries.





